cmake_minimum_required(VERSION 3.21)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
  message(FATAL_ERROR "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt. ")
endif()

project(autd3 VERSION 20.0.0)

message(STATUS "Build AUTD3: ${PROJECT_VERSION}")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)

option(USE_SYSTEM_EIGEN OFF)

if(USE_SYSTEM_EIGEN)
  find_package(Eigen3 REQUIRED)
else()
  include(FetchContent)
  set(EIGEN_BUILD_DOC OFF)
  set(BUILD_TESTING OFF)
  set(EIGEN_BUILD_PKGCONFIG OFF)
  FetchContent_Declare(
    eigen
    GIT_REPOSITORY https://gitlab.com/libeigen/eigen.git
    GIT_TAG 3.4.0)
  FetchContent_MakeAvailable(eigen)
endif()

include(CheckCXXCompilerFlag)
function(enable_cxx_compiler_flag_if_supported target scope flag)
  check_cxx_compiler_flag("${flag}" flag_supported)
  if(flag_supported)
    target_compile_options(${target} ${scope} ${flag})
    endif()
  unset(flag_supported CACHE)
endfunction()

add_library(autd3 INTERFACE)
target_include_directories(autd3 INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(autd3 INTERFACE Eigen3::Eigen)
target_compile_definitions(autd3 INTERFACE EIGEN_MPL2_ONLY)
enable_cxx_compiler_flag_if_supported(autd3 INTERFACE /wd4819)
target_link_directories(autd3 INTERFACE ${PROJECT_SOURCE_DIR}/lib)
target_link_libraries(autd3 INTERFACE autd3capi)
add_library(autd3::autd3 ALIAS autd3)
if(APPLE)
  target_link_libraries(autd3 INTERFACE "-framework CoreFoundation")
endif()

add_library(autd3_gain_holo INTERFACE)
target_include_directories(autd3_gain_holo INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(autd3_gain_holo INTERFACE Eigen3::Eigen)
target_compile_definitions(autd3_gain_holo INTERFACE EIGEN_MPL2_ONLY)
enable_cxx_compiler_flag_if_supported(autd3_gain_holo INTERFACE /wd4819)
target_link_directories(autd3_gain_holo INTERFACE ${PROJECT_SOURCE_DIR}/lib)
target_link_libraries(autd3_gain_holo INTERFACE autd3capi_gain_holo)
add_library(autd3::gain::holo ALIAS autd3_gain_holo)

add_library(autd3_modulation_audio_file INTERFACE)
target_include_directories(autd3_modulation_audio_file INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(autd3_modulation_audio_file INTERFACE Eigen3::Eigen)
target_compile_definitions(autd3_modulation_audio_file INTERFACE EIGEN_MPL2_ONLY)
enable_cxx_compiler_flag_if_supported(autd3_modulation_audio_file INTERFACE /wd4819)
target_link_directories(autd3_modulation_audio_file INTERFACE ${PROJECT_SOURCE_DIR}/lib)
target_link_libraries(autd3_modulation_audio_file INTERFACE autd3capi_modulation_audio_file)
add_library(autd3::modulation::audio_file ALIAS autd3_modulation_audio_file)

add_library(autd3_link_soem INTERFACE)
target_include_directories(autd3_link_soem INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(autd3_link_soem INTERFACE Eigen3::Eigen)
target_compile_definitions(autd3_link_soem INTERFACE EIGEN_MPL2_ONLY)
enable_cxx_compiler_flag_if_supported(autd3_link_soem INTERFACE /wd4819)
target_link_directories(autd3_link_soem INTERFACE ${PROJECT_SOURCE_DIR}/lib)
target_link_libraries(autd3_link_soem INTERFACE autd3capi_link_soem)
target_link_libraries(autd3_link_soem INTERFACE pcap)
add_library(autd3::link::soem ALIAS autd3_link_soem)

add_library(autd3_link_twincat INTERFACE)
target_include_directories(autd3_link_twincat INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(autd3_link_twincat INTERFACE Eigen3::Eigen)
target_compile_definitions(autd3_link_twincat INTERFACE EIGEN_MPL2_ONLY)
enable_cxx_compiler_flag_if_supported(autd3_link_twincat INTERFACE /wd4819)
target_link_directories(autd3_link_twincat INTERFACE ${PROJECT_SOURCE_DIR}/lib)
target_link_libraries(autd3_link_twincat INTERFACE autd3capi_link_twincat)
add_library(autd3::link::twincat ALIAS autd3_link_twincat)

add_library(autd3_link_simulator INTERFACE)
target_include_directories(autd3_link_simulator INTERFACE ${PROJECT_SOURCE_DIR}/include)
target_link_libraries(autd3_link_simulator INTERFACE Eigen3::Eigen)
target_compile_definitions(autd3_link_simulator INTERFACE EIGEN_MPL2_ONLY)
enable_cxx_compiler_flag_if_supported(autd3_link_simulator INTERFACE /wd4819)
target_link_directories(autd3_link_simulator INTERFACE ${PROJECT_SOURCE_DIR}/lib)
target_link_libraries(autd3_link_simulator INTERFACE autd3capi_link_simulator)
add_library(autd3::link::simulator ALIAS autd3_link_simulator)

find_package(Python3 COMPONENTS Development)
if(${Python3_FOUND})
  add_library(autd3_link_visualizer INTERFACE)
  target_include_directories(autd3_link_visualizer INTERFACE ${PROJECT_SOURCE_DIR}/include)
  target_link_libraries(autd3_link_visualizer INTERFACE Eigen3::Eigen)
  target_compile_definitions(autd3_link_visualizer INTERFACE EIGEN_MPL2_ONLY)
  enable_cxx_compiler_flag_if_supported(autd3_link_visualizer INTERFACE /wd4819)
  target_link_directories(autd3_link_visualizer INTERFACE ${PROJECT_SOURCE_DIR}/lib)
  target_link_libraries(autd3_link_visualizer INTERFACE autd3capi_link_visualizer)
  target_link_libraries(autd3_link_visualizer INTERFACE Python3::Python)
  if(APPLE)
    target_link_libraries(autd3_link_visualizer INTERFACE "-framework CoreGraphics")
    target_link_libraries(autd3_link_visualizer INTERFACE "-framework CoreText")
  endif()
  add_library(autd3::link::visualizer ALIAS autd3_link_visualizer)
else()
  message(STATUS "Cannot find Python3. Skip building autd3::link::visualizer.")
endif()

if(APPLE)
else()
  add_library(autd3_backend_cuda INTERFACE)
  target_include_directories(autd3_backend_cuda INTERFACE ${PROJECT_SOURCE_DIR}/include)
  target_link_libraries(autd3_backend_cuda INTERFACE Eigen3::Eigen)
  target_compile_definitions(autd3_backend_cuda INTERFACE EIGEN_MPL2_ONLY)
  enable_cxx_compiler_flag_if_supported(autd3_backend_cuda INTERFACE /wd4819)
  target_link_directories(autd3_backend_cuda INTERFACE ${PROJECT_SOURCE_DIR}/lib)
  target_link_libraries(autd3_backend_cuda INTERFACE autd3capi_backend_cuda)
  add_library(autd3::backend::cuda ALIAS autd3_backend_cuda)
endif()

#file(GLOB_RECURSE autd3_src ${PROJECT_SOURCE_DIR}/include/**/*.hpp)
#add_library(autd3 ${autd3_src})
#set_target_properties(autd3 PROPERTIES LINKER_LANGUAGE CXX)
#target_include_directories(autd3 PUBLIC ${PROJECT_SOURCE_DIR}/include)
#target_link_libraries(autd3 PUBLIC Eigen3::Eigen)
#target_compile_definitions(autd3 PUBLIC EIGEN_MPL2_ONLY)


#if defined __GNUC__ && defined COVERAGE
#define AUTD3_API __attribute__((__used__))
#else
#define AUTD3_API
#endif

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

extern "C" {

AUTD3_API [[nodiscard]] ResultBackend AUTDCUDABackend();

AUTD3_API void AUTDCUDABackendDelete(BackendPtr backend);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloCUDASDP(BackendPtr backend, const double *points, const double *amps, uint64_t size, double alpha,
                                                    double lambda, uint32_t repeat, EmissionConstraintPtr constraint);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloCUDAGS(BackendPtr backend, const double *points, const double *amps, uint64_t size, uint32_t repeat,
                                                   EmissionConstraintPtr constraint);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloCUDAGSPAT(BackendPtr backend, const double *points, const double *amps, uint64_t size, uint32_t repeat,
                                                      EmissionConstraintPtr constraint);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloCUDANaive(BackendPtr backend, const double *points, const double *amps, uint64_t size,
                                                      EmissionConstraintPtr constraint);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloCUDALM(BackendPtr backend, const double *points, const double *amps, uint64_t size, double eps_1,
                                                   double eps_2, double tau, uint32_t k_max, EmissionConstraintPtr constraint,
                                                   const double *initial_ptr, uint64_t initial_len);

}  // extern "C"

}  // namespace autd3::native_methods

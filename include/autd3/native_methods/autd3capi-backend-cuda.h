#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>
#include "autd3/native_methods/def.hpp"

namespace autd3::native_methods {

extern "C" {

[[nodiscard]] ResultBackend AUTDCUDABackend();

void AUTDCUDABackendDelete(BackendPtr backend);

[[nodiscard]]
GainPtr AUTDGainHoloCUDASDP(BackendPtr backend,
                            const Vector3 *points,
                            const float *amps,
                            uint32_t size,
                            float alpha,
                            float lambda,
                            uint32_t repeat,
                            EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloCUDAGS(BackendPtr backend,
                           const Vector3 *points,
                           const float *amps,
                           uint32_t size,
                           uint32_t repeat,
                           EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloCUDAGSPAT(BackendPtr backend,
                              const Vector3 *points,
                              const float *amps,
                              uint32_t size,
                              uint32_t repeat,
                              EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloCUDANaive(BackendPtr backend,
                              const Vector3 *points,
                              const float *amps,
                              uint32_t size,
                              EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloCUDALM(BackendPtr backend,
                           const Vector3 *points,
                           const float *amps,
                           uint32_t size,
                           float eps_1,
                           float eps_2,
                           float tau,
                           uint32_t k_max,
                           EmissionConstraintWrap constraint,
                           const float *initial_ptr,
                           uint64_t initial_len);

} // extern "C"

} // namespace autd3::native_methods

#if defined __GNUC__ && defined COVERAGE
#define AUTD3_API __attribute__((__used__))
#else
#define AUTD3_API
#endif

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

enum class SamplingMode : uint8_t {
  ExactFrequency = 0,
  SizeOptimized = 1,
};

struct ControllerBuilderPtr {
  void *_0;
};

struct FirmwareInfoListPtr {
  void *_0;
};

struct ResultFirmwareInfoList {
  FirmwareInfoListPtr result;
  uint32_t err_len;
  void *err;
};

struct GroupKVMapPtr {
  void *_0;
};

struct ResultGroupKVMap {
  GroupKVMapPtr result;
  uint32_t err_len;
  void *err;
};

struct GainCalcDrivesMapPtr {
  void *_0;
};

struct ResultGainCalcDrivesMap {
  GainCalcDrivesMapPtr result;
  uint32_t err_len;
  void *err;
};

struct GroupGainMapPtr {
  void *_0;
};

struct ContextPtr {
  void *_0;
};

struct LinkAuditBuilderPtr {
  void *_0;
};

struct ModulationCalcPtr {
  void *_0;
};

struct ResultModulationCalc {
  ModulationCalcPtr result;
  uint32_t result_len;
  uint32_t freq_div;
  uint32_t err_len;
  void *err;
};

struct STMPropsPtr {
  void *_0;
};

extern "C" {

AUTD3_API [[nodiscard]] ControllerBuilderPtr AUTDControllerBuilder();

AUTD3_API
ControllerBuilderPtr AUTDControllerBuilderAddDevice(ControllerBuilderPtr builder, double x, double y, double z, double qw, double qx, double qy,
                                                    double qz);

AUTD3_API
AUTD3_API [[nodiscard]] ResultController AUTDControllerOpen(ControllerBuilderPtr builder, LinkBuilderPtr link_builder, int64_t timeout_ns);

AUTD3_API [[nodiscard]] ResultI32 AUTDControllerClose(ControllerPtr cnt);

AUTD3_API ResultI32 AUTDControllerDelete(ControllerPtr cnt);

AUTD3_API [[nodiscard]] ResultI32 AUTDControllerFPGAState(ControllerPtr cnt, int32_t *out);

AUTD3_API
AUTD3_API [[nodiscard]] ResultFirmwareInfoList AUTDControllerFirmwareInfoListPointer(ControllerPtr cnt);

AUTD3_API
void AUTDControllerFirmwareInfoGet(FirmwareInfoListPtr p_info_list, uint32_t idx, char *info);

AUTD3_API void AUTDControllerFirmwareInfoListPointerDelete(FirmwareInfoListPtr p_info_list);

AUTD3_API void AUTDFirmwareLatest(char *latest);

AUTD3_API
AUTD3_API [[nodiscard]] ResultI32 AUTDControllerSend(ControllerPtr cnt, DatagramPtr d1, DatagramPtr d2, int64_t timeout_ns);

AUTD3_API [[nodiscard]] GroupKVMapPtr AUTDControllerGroupCreateKVMap();

AUTD3_API
AUTD3_API [[nodiscard]] ResultGroupKVMap AUTDControllerGroupKVMapSet(GroupKVMapPtr map, int32_t key, DatagramPtr d1, DatagramPtr d2,
                                                                     int64_t timeout_ns);

AUTD3_API
AUTD3_API [[nodiscard]] ResultI32 AUTDControllerGroup(ControllerPtr cnt, const int32_t *map, GroupKVMapPtr kv_map);

AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramClear();

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramConfigureDebugOutputIdx(void *f, void *context, GeometryPtr geometry);

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramConfigureForceFan(void *f, void *context, GeometryPtr geometry);

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramConfigurePhaseFilter(void *f, void *context, GeometryPtr geometry);

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramConfigureReadsFPGAState(void *f, void *context, GeometryPtr geometry);

AUTD3_API
AUTD3_API [[nodiscard]] ResultDatagram AUTDDatagramSilencerFixedUpdateRate(uint16_t value_intensity, uint16_t value_phase);

AUTD3_API
AUTD3_API [[nodiscard]] ResultDatagram AUTDDatagramSilencerFixedCompletionSteps(uint16_t value_intensity, uint16_t value_phase, bool strict_mode);

AUTD3_API
AUTD3_API [[nodiscard]] bool AUTDDatagramSilencerFixedCompletionStepsIsDefault(DatagramPtr silencer);

AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramSynchronize();

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDGainIntoDatagramWithSegment(GainPtr gain, Segment segment, bool update_segment);

AUTD3_API [[nodiscard]] DatagramPtr AUTDGainIntoDatagram(GainPtr gain);

AUTD3_API [[nodiscard]] ResultGainCalcDrivesMap AUTDGainCalc(GainPtr gain, GeometryPtr geometry);

AUTD3_API void AUTDGainCalcGetResult(GainCalcDrivesMapPtr src, Drive *dst, uint32_t idx);

AUTD3_API void AUTDGainCalcFreeResult(GainCalcDrivesMapPtr src);

AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramChangeGainSegment(Segment segment);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainBessel(double x, double y, double z, double nx, double ny, double nz, double theta_z, uint8_t intensity,
                                               uint8_t phase_offset);

AUTD3_API [[nodiscard]] bool AUTDGainBesselIsDefault(GainPtr bessel);

AUTD3_API [[nodiscard]] GainPtr AUTDGainCustom();

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainCustomSet(GainPtr custom, uint32_t dev_idx, const Drive *ptr, uint32_t len);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainFocus(double x, double y, double z, uint8_t intensity, uint8_t phase_offset);

AUTD3_API [[nodiscard]] bool AUTDGainFocusIsDefault(GainPtr focus);

AUTD3_API
AUTD3_API [[nodiscard]] GroupGainMapPtr AUTDGainGroupCreateMap(const uint32_t *device_indices_ptr, uint32_t num_devices);

AUTD3_API
AUTD3_API [[nodiscard]] GroupGainMapPtr AUTDGainGroupMapSet(GroupGainMapPtr map, uint32_t dev_idx, const int32_t *map_data);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainGroup(GroupGainMapPtr map, const int32_t *keys_ptr, const GainPtr *values_ptr, uint32_t kv_len);

AUTD3_API [[nodiscard]] GainPtr AUTDGainNull();

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainPlane(double nx, double ny, double nz, uint8_t intensity, uint8_t phase_offset);

AUTD3_API [[nodiscard]] bool AUTDGainPlanelIsDefault(GainPtr plane);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainTransducerTest(void *f, ContextPtr context, GeometryPtr geometry);

AUTD3_API [[nodiscard]] GainPtr AUTDGainUniform(uint8_t intensity, uint8_t phase);

AUTD3_API [[nodiscard]] bool AUTDGainUniformIsDefault(GainPtr uniform);

AUTD3_API [[nodiscard]] GeometryPtr AUTDGeometry(ControllerPtr cnt);

AUTD3_API [[nodiscard]] uint32_t AUTDGeometryNumDevices(GeometryPtr geo);

AUTD3_API [[nodiscard]] DevicePtr AUTDDevice(GeometryPtr geo, uint32_t dev_idx);

AUTD3_API [[nodiscard]] uint32_t AUTDDeviceNumTransducers(DevicePtr dev);

AUTD3_API [[nodiscard]] double AUTDDeviceGetSoundSpeed(DevicePtr dev);

AUTD3_API void AUTDDeviceSetSoundSpeed(DevicePtr dev, double value);

AUTD3_API
void AUTDDeviceSetSoundSpeedFromTemp(DevicePtr dev, double temp, double k, double r, double m);

AUTD3_API [[nodiscard]] double AUTDDeviceGetAttenuation(DevicePtr dev);

AUTD3_API void AUTDDeviceSetAttenuation(DevicePtr dev, double value);

AUTD3_API void AUTDDeviceCenter(DevicePtr dev, double *center);

AUTD3_API void AUTDDeviceTranslate(DevicePtr dev, double x, double y, double z);

AUTD3_API void AUTDDeviceRotate(DevicePtr dev, double w, double i, double j, double k);

AUTD3_API
void AUTDDeviceAffine(DevicePtr dev, double x, double y, double z, double w, double i, double j, double k);

AUTD3_API void AUTDDeviceEnableSet(DevicePtr dev, bool value);

AUTD3_API [[nodiscard]] bool AUTDDeviceEnableGet(DevicePtr dev);

AUTD3_API void AUTDRotationFromEulerZYZ(double x, double y, double z, double *rot);

AUTD3_API [[nodiscard]] TransducerPtr AUTDTransducer(DevicePtr dev, uint32_t idx);

AUTD3_API void AUTDTransducerPosition(TransducerPtr tr, double *pos);

AUTD3_API void AUTDTransducerRotation(TransducerPtr tr, double *rot);

AUTD3_API void AUTDTransducerDirectionX(TransducerPtr tr, double *dir);

AUTD3_API void AUTDTransducerDirectionY(TransducerPtr tr, double *dir);

AUTD3_API void AUTDTransducerDirectionZ(TransducerPtr tr, double *dir);

AUTD3_API [[nodiscard]] double AUTDTransducerWavelength(TransducerPtr tr, double sound_speed);

AUTD3_API [[nodiscard]] LinkPtr AUTDLinkGet(ControllerPtr cnt);

AUTD3_API [[nodiscard]] LinkAuditBuilderPtr AUTDLinkAudit();

AUTD3_API
AUTD3_API [[nodiscard]] LinkAuditBuilderPtr AUTDLinkAuditWithTimeout(LinkAuditBuilderPtr audit, uint64_t timeout_ns);

AUTD3_API [[nodiscard]] LinkBuilderPtr AUTDLinkAuditIntoBuilder(LinkAuditBuilderPtr audit);

AUTD3_API [[nodiscard]] bool AUTDLinkAuditIsOpen(LinkPtr audit);

AUTD3_API [[nodiscard]] uint64_t AUTDLinkAuditTimeoutNs(LinkPtr audit);

AUTD3_API [[nodiscard]] int64_t AUTDLinkAuditLastTimeoutNs(LinkPtr audit);

AUTD3_API void AUTDLinkAuditDown(LinkPtr audit);

AUTD3_API void AUTDLinkAuditBreakDown(LinkPtr audit);

AUTD3_API [[nodiscard]] uint32_t AUTDLinkAuditCpuNumTransducers(LinkPtr audit, uint32_t idx);

AUTD3_API void AUTDLinkAuditFpgaAssertThermalSensor(LinkPtr audit, uint32_t idx);

AUTD3_API void AUTDLinkAuditFpgaDeassertThermalSensor(LinkPtr audit, uint32_t idx);

AUTD3_API [[nodiscard]] bool AUTDLinkAuditFpgaIsForceFan(LinkPtr audit, uint32_t idx);

AUTD3_API [[nodiscard]] Segment AUTDLinkAuditFpgaCurrentStmSegment(LinkPtr audit, uint32_t idx);

AUTD3_API [[nodiscard]] Segment AUTDLinkAuditFpgaCurrentModSegment(LinkPtr audit, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] bool AUTDLinkAuditFpgaIsStmGainMode(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint16_t AUTDLinkAuditFpgaSilencerUpdateRateIntensity(LinkPtr audit, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint16_t AUTDLinkAuditFpgaSilencerUpdateRatePhase(LinkPtr audit, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint16_t AUTDLinkAuditFpgaSilencerCompletionStepsIntensity(LinkPtr audit, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint16_t AUTDLinkAuditFpgaSilencerCompletionStepsPhase(LinkPtr audit, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] bool AUTDLinkAuditFpgaSilencerFixedCompletionStepsMode(LinkPtr audit, uint32_t idx);

AUTD3_API [[nodiscard]] uint8_t AUTDLinkAuditFpgaDebugOutputIdx(LinkPtr audit, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint32_t AUTDLinkAuditFpgaStmFrequencyDivision(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint32_t AUTDLinkAuditFpgaStmCycle(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint32_t AUTDLinkAuditFpgaSoundSpeed(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] LoopBehavior AUTDLinkAuditFpgaStmLoopBehavior(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint32_t AUTDLinkAuditFpgaModulationFrequencyDivision(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
AUTD3_API [[nodiscard]] uint32_t AUTDLinkAuditFpgaModulationCycle(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
void AUTDLinkAuditFpgaModulation(LinkPtr audit, Segment segment, uint32_t idx, uint8_t *data);

AUTD3_API
AUTD3_API [[nodiscard]] LoopBehavior AUTDLinkAuditFpgaModulationLoopBehavior(LinkPtr audit, Segment segment, uint32_t idx);

AUTD3_API
void AUTDLinkAuditFpgaDrives(LinkPtr audit, Segment segment, uint32_t idx, uint32_t stm_idx, uint8_t *intensities, uint8_t *phases);

AUTD3_API void AUTDLinkAuditFpgaPhaseFilter(LinkPtr audit, uint32_t idx, uint8_t *phase_filter);

AUTD3_API [[nodiscard]] LinkBuilderPtr AUTDLinkNop();

AUTD3_API [[nodiscard]] SamplingConfiguration AUTDModulationSamplingConfig(ModulationPtr m);

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDModulationIntoDatagramWithSegment(ModulationPtr m, Segment segment, bool update_segment);

AUTD3_API [[nodiscard]] DatagramPtr AUTDModulationIntoDatagram(ModulationPtr m);

AUTD3_API [[nodiscard]] ResultI32 AUTDModulationSize(ModulationPtr m);

AUTD3_API [[nodiscard]] ResultModulationCalc AUTDModulationCalc(ModulationPtr m);

AUTD3_API void AUTDModulationCalcGetResult(ModulationCalcPtr src, uint8_t *dst);

AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramChangeModulationSegment(Segment segment);

AUTD3_API
AUTD3_API [[nodiscard]] ModulationPtr AUTDModulationCustom(SamplingConfiguration config, const uint8_t *ptr, uint64_t len,
                                                           LoopBehavior loop_behavior);

AUTD3_API
AUTD3_API [[nodiscard]] ModulationPtr AUTDModulationFourier(const ModulationPtr *components, uint32_t size, LoopBehavior loop_behavior);

AUTD3_API
AUTD3_API [[nodiscard]] ModulationPtr AUTDModulationWithRadiationPressure(ModulationPtr m, LoopBehavior loop_behavior);

AUTD3_API
AUTD3_API [[nodiscard]] ModulationPtr AUTDModulationSine(double freq, SamplingConfiguration config, uint8_t intensity, uint8_t offset, uint8_t phase,
                                                         SamplingMode mode, LoopBehavior loop_behavior);

AUTD3_API [[nodiscard]] bool AUTDModulationSineIsDefault(ModulationPtr sine);

AUTD3_API
AUTD3_API [[nodiscard]] ModulationPtr AUTDModulationSquare(double freq, SamplingConfiguration config, uint8_t low, uint8_t high, double duty,
                                                           SamplingMode mode, LoopBehavior loop_behavior);

AUTD3_API [[nodiscard]] bool AUTDModulationSquareIsDefault(ModulationPtr square);

AUTD3_API
AUTD3_API [[nodiscard]] ModulationPtr AUTDModulationStatic(uint8_t intensity, LoopBehavior loop_behavior);

AUTD3_API [[nodiscard]] bool AUTDModulationStaticIsDefault(ModulationPtr s);

AUTD3_API
AUTD3_API [[nodiscard]] ModulationPtr AUTDModulationWithTransform(ModulationPtr m, void *f, void *context, LoopBehavior loop_behavior);

AUTD3_API [[nodiscard]] STMPropsPtr AUTDSTMPropsFromFreq(double freq);

AUTD3_API [[nodiscard]] STMPropsPtr AUTDSTMPropsFromPeriod(uint64_t p);

AUTD3_API [[nodiscard]] STMPropsPtr AUTDSTMPropsFromSamplingConfig(SamplingConfiguration config);

AUTD3_API
AUTD3_API [[nodiscard]] STMPropsPtr AUTDSTMPropsWithLoopBehavior(STMPropsPtr props, LoopBehavior loop_behavior);

AUTD3_API [[nodiscard]] double AUTDSTMPropsFrequency(STMPropsPtr props, uint64_t size);

AUTD3_API [[nodiscard]] uint64_t AUTDSTMPropsPeriod(STMPropsPtr props, uint64_t size);

AUTD3_API
AUTD3_API [[nodiscard]] ResultSamplingConfig AUTDSTMPropsSamplingConfig(STMPropsPtr props, uint64_t size);

AUTD3_API
AUTD3_API [[nodiscard]] ResultFocusSTM AUTDSTMFocus(STMPropsPtr props, const double *points, const uint8_t *intensities, uint64_t size);

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDSTMFocusIntoDatagramWithSegment(FocusSTMPtr stm, Segment segment, bool update_segment);

AUTD3_API [[nodiscard]] DatagramPtr AUTDSTMFocusIntoDatagram(FocusSTMPtr stm);

AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramChangeFocusSTMSegment(Segment segment);

AUTD3_API
AUTD3_API [[nodiscard]] ResultGainSTM AUTDSTMGain(STMPropsPtr props, const GainPtr *gains, uint32_t size, GainSTMMode mode);

AUTD3_API
AUTD3_API [[nodiscard]] DatagramPtr AUTDSTMGainIntoDatagramWithSegment(GainSTMPtr stm, Segment segment, bool update_segment);

AUTD3_API [[nodiscard]] DatagramPtr AUTDSTMGainIntoDatagram(GainSTMPtr stm);

AUTD3_API [[nodiscard]] DatagramPtr AUTDDatagramChangeGainSTMSegment(Segment segment);

}  // extern "C"

}  // namespace autd3::native_methods

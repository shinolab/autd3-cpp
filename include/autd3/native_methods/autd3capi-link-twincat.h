#if defined __GNUC__ && defined COVERAGE
#define AUTD3_API __attribute__((__used__))
#else
#define AUTD3_API
#endif

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

struct LinkTwinCATBuilderPtr {
  void* _0;
};

struct LinkRemoteTwinCATBuilderPtr {
  void* _0;
};

struct ResultLinkRemoteTwinCATBuilder {
  LinkRemoteTwinCATBuilderPtr result;
  uint32_t err_len;
  void* err;
};

extern "C" {

AUTD3_API [[nodiscard]] LinkTwinCATBuilderPtr AUTDLinkTwinCAT();

AUTD3_API
AUTD3_API [[nodiscard]] LinkTwinCATBuilderPtr AUTDLinkTwinCATWithTimeout(LinkTwinCATBuilderPtr twincat, uint64_t timeout_ns);

AUTD3_API [[nodiscard]] LinkBuilderPtr AUTDLinkTwinCATIntoBuilder(LinkTwinCATBuilderPtr twincat);

AUTD3_API
AUTD3_API [[nodiscard]] ResultLinkRemoteTwinCATBuilder AUTDLinkRemoteTwinCAT(const char* server_ams_net_id);

AUTD3_API
AUTD3_API [[nodiscard]] LinkRemoteTwinCATBuilderPtr AUTDLinkRemoteTwinCATWithServerIP(LinkRemoteTwinCATBuilderPtr twincat, const char* addr);

AUTD3_API
AUTD3_API [[nodiscard]] LinkRemoteTwinCATBuilderPtr AUTDLinkRemoteTwinCATWithClientAmsNetId(LinkRemoteTwinCATBuilderPtr twincat, const char* id);

AUTD3_API
AUTD3_API [[nodiscard]] LinkRemoteTwinCATBuilderPtr AUTDLinkRemoteTwinCATWithTimeout(LinkRemoteTwinCATBuilderPtr twincat, uint64_t timeout_ns);

AUTD3_API
AUTD3_API [[nodiscard]] LinkBuilderPtr AUTDLinkRemoteTwinCATIntoBuilder(LinkRemoteTwinCATBuilderPtr twincat);

}  // extern "C"

}  // namespace autd3::native_methods

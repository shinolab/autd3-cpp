#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

enum class EmissionConstraintTag : uint8_t {
  Normalize = 1,
  Uniform = 2,
  Multiply = 3,
  Clamp = 4,
};

union EmissionConstraintValue {
  EmitIntensity null;
  EmitIntensity uniform;
  float multiply;
  EmitIntensity clamp[2];
};

struct EmissionConstraintWrap {
  EmissionConstraintTag tag;
  EmissionConstraintValue value;
};

struct GreedyOption {
  EmissionConstraintWrap constraint;
  uint8_t phase_div;
};

struct BackendPtr {
  const void *_0;
};

struct GSOption {
  EmissionConstraintWrap constraint;
  uint32_t repeat;
};

struct GSPATOption {
  EmissionConstraintWrap constraint;
  uint32_t repeat;
};

struct LMOption {
  EmissionConstraintWrap constraint;
  float eps_1;
  float eps_2;
  float tau;
  uint32_t k_max;
  const float *initial;
  uint32_t initial_len;
};

struct NaiveOption {
  EmissionConstraintWrap constraint;
};

extern "C" {

[[nodiscard]] float AUTDGainHoloSPLToPascal(float value);

[[nodiscard]] float AUTDGainHoloPascalToSPL(float value);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintNormalize();

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintUniform(EmitIntensity intensity);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintMultiply(float v);

[[nodiscard]]
EmissionConstraintWrap AUTDGainHoloConstraintClamp(EmitIntensity min_v,
                                                   EmitIntensity max_v);

[[nodiscard]]
GainPtr AUTDGainHoloGreedySphere(const Point3 *points,
                                 const float *amps,
                                 uint32_t size,
                                 GreedyOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGreedyT4010A1(const Point3 *points,
                                  const float *amps,
                                  uint32_t size,
                                  GreedyOption option);

[[nodiscard]] bool AUTDGainGreedyIsDefault(GreedyOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGSSphere(BackendPtr backend,
                             const Point3 *points,
                             const float *amps,
                             uint32_t size,
                             GSOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGST4010A1(BackendPtr backend,
                              const Point3 *points,
                              const float *amps,
                              uint32_t size,
                              GSOption option);

[[nodiscard]] bool AUTDGainGSIsDefault(GSOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGSPATSphere(BackendPtr backend,
                                const Point3 *points,
                                const float *amps,
                                uint32_t size,
                                GSPATOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGSPATT4010A1(BackendPtr backend,
                                 const Point3 *points,
                                 const float *amps,
                                 uint32_t size,
                                 GSPATOption option);

[[nodiscard]] bool AUTDGainGSPATIsDefault(GSPATOption option);

[[nodiscard]]
GainPtr AUTDGainHoloLMSphere(BackendPtr backend,
                             const Point3 *points,
                             const float *amps,
                             uint32_t size,
                             LMOption option);

[[nodiscard]]
GainPtr AUTDGainHoloLMT4010A1(BackendPtr backend,
                              const Point3 *points,
                              const float *amps,
                              uint32_t size,
                              LMOption option);

[[nodiscard]] bool AUTDGainLMIsDefault(LMOption option);

[[nodiscard]]
GainPtr AUTDGainHoloNaiveSphere(BackendPtr backend,
                                const Point3 *points,
                                const float *amps,
                                uint32_t size,
                                NaiveOption option);

[[nodiscard]]
GainPtr AUTDGainHoloNaiveT4010A1(BackendPtr backend,
                                 const Point3 *points,
                                 const float *amps,
                                 uint32_t size,
                                 NaiveOption option);

[[nodiscard]] bool AUTDGainNaiveIsDefault(NaiveOption option);

[[nodiscard]] BackendPtr AUTDNalgebraBackendSphere();

[[nodiscard]] BackendPtr AUTDNalgebraBackendT4010A1();

void AUTDDeleteNalgebraBackendSphere(BackendPtr backend);

void AUTDDeleteNalgebraBackendT4010A1(BackendPtr backend);

}  // extern "C"

}  // namespace autd3::native_methods

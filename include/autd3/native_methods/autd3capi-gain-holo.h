#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

enum class EmissionConstraintTag : uint8_t {
  DontCare = 0,
  Normalize = 1,
  Uniform = 2,
  Multiply = 3,
  Clamp = 4,
};

union EmissionConstraintValue {
  uint8_t null;
  uint8_t uniform;
  float multiply;
  uint8_t clamp[2];
};

struct EmissionConstraintWrap {
  EmissionConstraintTag tag;
  EmissionConstraintValue value;
};

struct BackendPtr {
  void* _0;
};

struct ResultBackend {
  BackendPtr result;
  uint32_t err_len;
  void* err;
};

extern "C" {

[[nodiscard]] float AUTDGainHoloSPLToPascal(float value);

[[nodiscard]] float AUTDGainHoloPascalToSPL(float value);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintDotCare();

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintNormalize();

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintUniform(uint8_t intensity);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintMultiply(float v);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintClamp(uint8_t min_v, uint8_t max_v);

[[nodiscard]]
GainPtr AUTDGainHoloGreedySphere(const float *points,
                                 const float *amps,
                                 uint32_t size,
                                 uint8_t div,
                                 EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloGreedyT4010A1(const float *points,
                                  const float *amps,
                                  uint32_t size,
                                  uint8_t div,
                                  EmissionConstraintWrap constraint);

[[nodiscard]] bool AUTDGainGreedyIsDefault(GainPtr greedy);

[[nodiscard]]
GainPtr AUTDGainHoloGSSphere(BackendPtr backend,
                             const float *points,
                             const float *amps,
                             uint32_t size,
                             uint32_t repeat,
                             EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloGST4010A1(BackendPtr backend,
                              const float *points,
                              const float *amps,
                              uint32_t size,
                              uint32_t repeat,
                              EmissionConstraintWrap constraint);

[[nodiscard]] bool AUTDGainGSIsDefault(GainPtr gs);

[[nodiscard]]
GainPtr AUTDGainHoloGSPATSphere(BackendPtr backend,
                                const float *points,
                                const float *amps,
                                uint32_t size,
                                uint32_t repeat,
                                EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloGSPATT4010A1(BackendPtr backend,
                                 const float *points,
                                 const float *amps,
                                 uint32_t size,
                                 uint32_t repeat,
                                 EmissionConstraintWrap constraint);

[[nodiscard]] bool AUTDGainGSPATIsDefault(GainPtr gs);

[[nodiscard]]
GainPtr AUTDGainHoloLMSphere(BackendPtr backend,
                             const float *points,
                             const float *amps,
                             uint32_t size,
                             float eps_1,
                             float eps_2,
                             float tau,
                             uint32_t k_max,
                             const float *initial_ptr,
                             uint32_t initial_len,
                             EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloLMT4010A1(BackendPtr backend,
                              const float *points,
                              const float *amps,
                              uint32_t size,
                              float eps_1,
                              float eps_2,
                              float tau,
                              uint32_t k_max,
                              const float *initial_ptr,
                              uint32_t initial_len,
                              EmissionConstraintWrap constraint);

[[nodiscard]] bool AUTDGainLMIsDefault(GainPtr gs);

[[nodiscard]]
GainPtr AUTDGainHoloNaiveSphere(BackendPtr backend,
                                const float *points,
                                const float *amps,
                                uint32_t size,
                                EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloNaiveT4010A1(BackendPtr backend,
                                 const float *points,
                                 const float *amps,
                                 uint32_t size,
                                 EmissionConstraintWrap constraint);

[[nodiscard]] bool AUTDGainNaiveIsDefault(GainPtr gs);

[[nodiscard]] BackendPtr AUTDNalgebraBackendSphere();

[[nodiscard]] BackendPtr AUTDNalgebraBackendT4010A1();

void AUTDDeleteNalgebraBackendSphere(BackendPtr backend);

void AUTDDeleteNalgebraBackendT4010A1(BackendPtr backend);

[[nodiscard]]
GainPtr AUTDGainHoloSDPSphere(BackendPtr backend,
                              const float *points,
                              const float *amps,
                              uint32_t size,
                              float alpha,
                              float lambda,
                              uint32_t repeat,
                              EmissionConstraintWrap constraint);

[[nodiscard]]
GainPtr AUTDGainHoloSDPT4010A1(BackendPtr backend,
                               const float *points,
                               const float *amps,
                               uint32_t size,
                               float alpha,
                               float lambda,
                               uint32_t repeat,
                               EmissionConstraintWrap constraint);

[[nodiscard]] bool AUTDGainSDPIsDefault(GainPtr gs);

} // extern "C"

} // namespace autd3::native_methods

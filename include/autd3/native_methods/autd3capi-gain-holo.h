#if defined __GNUC__ && defined COVERAGE
#define AUTD3_API __attribute__((__used__))
#else
#define AUTD3_API
#endif

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

struct EmissionConstraintPtr {
  void *_0;
};

struct BackendPtr {
  void *_0;
};

struct ResultBackend {
  BackendPtr result;
  uint32_t err_len;
  void *err;
};

extern "C" {

AUTD3_API [[nodiscard]] double AUTDGainHoloSPLToPascal(double value);

AUTD3_API [[nodiscard]] double AUTDGainHoloPascalToSPL(double value);

AUTD3_API [[nodiscard]] EmissionConstraintPtr AUTDGainHoloConstraintDotCare();

AUTD3_API [[nodiscard]] EmissionConstraintPtr AUTDGainHoloConstraintNormalize();

AUTD3_API [[nodiscard]] EmissionConstraintPtr AUTDGainHoloConstraintUniform(uint8_t intensity);

AUTD3_API
AUTD3_API [[nodiscard]] EmissionConstraintPtr AUTDGainHoloConstraintClamp(uint8_t min_v, uint8_t max_v);

AUTD3_API
AUTD3_API [[nodiscard]] bool AUTDGainHoloConstraintEq(EmissionConstraintPtr a, EmissionConstraintPtr b);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloGreedy(const double *points, const double *amps, uint64_t size, uint8_t div,
                                                   EmissionConstraintPtr constraint);

AUTD3_API [[nodiscard]] bool AUTDGainGreedyIsDefault(GainPtr greedy);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloGS(BackendPtr backend, const double *points, const double *amps, uint64_t size, uint32_t repeat,
                                               EmissionConstraintPtr constraint);

AUTD3_API [[nodiscard]] bool AUTDGainGSIsDefault(GainPtr gs);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloGSPAT(BackendPtr backend, const double *points, const double *amps, uint64_t size, uint32_t repeat,
                                                  EmissionConstraintPtr constraint);

AUTD3_API [[nodiscard]] bool AUTDGainGSPATIsDefault(GainPtr gs);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloLM(BackendPtr backend, const double *points, const double *amps, uint64_t size, double eps_1,
                                               double eps_2, double tau, uint32_t k_max, const double *initial_ptr, uint64_t initial_len,
                                               EmissionConstraintPtr constraint);

AUTD3_API [[nodiscard]] bool AUTDGainLMIsDefault(GainPtr gs);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloNaive(BackendPtr backend, const double *points, const double *amps, uint64_t size,
                                                  EmissionConstraintPtr constraint);

AUTD3_API [[nodiscard]] bool AUTDGainNaiveIsDefault(GainPtr gs);

AUTD3_API [[nodiscard]] BackendPtr AUTDNalgebraBackend();

AUTD3_API void AUTDDeleteNalgebraBackend(BackendPtr backend);

AUTD3_API
AUTD3_API [[nodiscard]] GainPtr AUTDGainHoloSDP(BackendPtr backend, const double *points, const double *amps, uint64_t size, double alpha,
                                                double lambda, uint32_t repeat, EmissionConstraintPtr constraint);

AUTD3_API [[nodiscard]] bool AUTDGainSDPIsDefault(GainPtr gs);

}  // extern "C"

}  // namespace autd3::native_methods

#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

enum class EmissionConstraintTag : uint8_t {
  Normalize = 1,
  Uniform = 2,
  Multiply = 3,
  Clamp = 4,
};

union EmissionConstraintValue {
  Intensity null;
  Intensity uniform;
  float multiply;
  Intensity clamp[2];
};

struct EmissionConstraintWrap {
  EmissionConstraintTag tag;
  EmissionConstraintValue value;
};

struct GreedyOption {
  EmissionConstraintWrap constraint;
  uint8_t phase_quantization_levels;
};

struct GSOption {
  EmissionConstraintWrap constraint;
  uint32_t repeat;
};

struct GSPATOption {
  EmissionConstraintWrap constraint;
  uint32_t repeat;
};

struct NaiveOption {
  EmissionConstraintWrap constraint;
};

extern "C" {

[[nodiscard]] float AUTDGainHoloSPLToPascal(float value);

[[nodiscard]] float AUTDGainHoloPascalToSPL(float value);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintNormalize();

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintUniform(Intensity intensity);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintMultiply(float v);

[[nodiscard]] EmissionConstraintWrap AUTDGainHoloConstraintClamp(Intensity min_v, Intensity max_v);

[[nodiscard]]
GainPtr AUTDGainHoloGreedySphere(const Point3 *points,
                                 const float *amps,
                                 uint32_t size,
                                 GreedyOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGreedyT4010A1(const Point3 *points,
                                  const float *amps,
                                  uint32_t size,
                                  GreedyOption option);

[[nodiscard]] bool AUTDGainGreedyIsDefault(GreedyOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGSSphere(const Point3 *points,
                             const float *amps,
                             uint32_t size,
                             GSOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGST4010A1(const Point3 *points,
                              const float *amps,
                              uint32_t size,
                              GSOption option);

[[nodiscard]] bool AUTDGainGSIsDefault(GSOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGSPATSphere(const Point3 *points,
                                const float *amps,
                                uint32_t size,
                                GSPATOption option);

[[nodiscard]]
GainPtr AUTDGainHoloGSPATT4010A1(const Point3 *points,
                                 const float *amps,
                                 uint32_t size,
                                 GSPATOption option);

[[nodiscard]] bool AUTDGainGSPATIsDefault(GSPATOption option);

[[nodiscard]]
GainPtr AUTDGainHoloNaiveSphere(const Point3 *points,
                                const float *amps,
                                uint32_t size,
                                NaiveOption option);

[[nodiscard]]
GainPtr AUTDGainHoloNaiveT4010A1(const Point3 *points,
                                 const float *amps,
                                 uint32_t size,
                                 NaiveOption option);

[[nodiscard]] bool AUTDGainNaiveIsDefault(NaiveOption option);

}  // extern "C"

}  // namespace autd3::native_methods

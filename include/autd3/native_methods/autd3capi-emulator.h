#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

struct EmulatorPtr {
  const void *_0;
};

struct RecordPtr {
  const void *_0;
};

struct ResultRecord {
  RecordPtr result;
  uint32_t err_len;
  const void* err;
};

struct ResultEmualtorErr {
  int32_t result;
  uint32_t err_len;
  const void* err;
};

struct SoundFieldPtr {
  const void *_0;
};

struct ResultSoundField {
  SoundFieldPtr result;
  uint32_t err_len;
  const void* err;
};

struct Range {
  float x_start;
  float x_end;
  float y_start;
  float y_end;
  float z_start;
  float z_end;
  float resolution;
};

struct RecordOption {
  float sound_speed;
  uint64_t time_step_ns;
  bool print_progress;
  uint64_t memory_limits_hint_mb;
  bool gpu;
};

extern "C" {

[[nodiscard]] EmulatorPtr AUTDEmulator(const Vector3 *pos, const Quaternion *rot, uint16_t len);

void AUTDEmulatorFree(EmulatorPtr emulator);

[[nodiscard]] GeometryPtr AUTDEmulatorGeometry(EmulatorPtr emulator);

[[nodiscard]]
EmulatorPtr AUTDEmulatorWithParallelThreshold(EmulatorPtr emulator,
                                              uint16_t parallel_threshold);

[[nodiscard]] EmulatorPtr AUTDEmulatorWithSendInterval(EmulatorPtr emulator, uint64_t interval_ns);

[[nodiscard]]
EmulatorPtr AUTDEmulatorWithReceiveInterval(EmulatorPtr emulator,
                                            uint64_t interval_ns);

[[nodiscard]]
EmulatorPtr AUTDEmulatorWithTimerResolution(EmulatorPtr emulator,
                                            uint32_t resolution);

[[nodiscard]]
FfiFutureResultRecord AUTDEmulatorRecordFrom(EmulatorPtr emulator,
                                               uint64_t start_time,
                                               const void* f);

void AUTDEmulatorRecordFree(RecordPtr record);

[[nodiscard]]
ResultRecord AUTDEmulatorWaitResultRecord(HandlePtr handle,
                                          FfiFutureResultRecord future);

[[nodiscard]] ResultEmualtorErr AUTDEmulatorTickNs(LinkPtr record, uint64_t tick_ns);

[[nodiscard]] uint16_t AUTDEmulatorRecordNumDevices(RecordPtr record);

[[nodiscard]] uint8_t AUTDEmulatorRecordNumTransducers(RecordPtr record, uint16_t dev_idx);

[[nodiscard]] uint64_t AUTDEmulatorRecordDriveLen(RecordPtr record);

void AUTDEmulatorRecordDriveTime(RecordPtr record, float *time);

void AUTDEmulatorRecordDrivePulseWidth(RecordPtr record,
                                       uint16_t dev_idx,
                                       uint8_t tr_idx,
                                       uint8_t *pulsewidth);

void AUTDEmulatorRecordDrivePhase(RecordPtr record,
                                  uint16_t dev_idx,
                                  uint8_t tr_idx,
                                  uint8_t *pulsewidth);

[[nodiscard]] uint64_t AUTDEmulatorRecordOutputLen(RecordPtr record);

void AUTDEmulatorRecordOutputTime(RecordPtr record, float *time);

void AUTDEmulatorRecordOutputVoltage(RecordPtr record, uint16_t dev_idx, uint8_t tr_idx, float *v);

void AUTDEmulatorRecordOutputUltrasound(RecordPtr record,
                                        uint16_t dev_idx,
                                        uint8_t tr_idx,
                                        float *v);

[[nodiscard]]
LocalFfiFutureResultSoundField AUTDEmulatorSoundField(RecordPtr record,
                                                        Range range,
                                                        RecordOption option);

[[nodiscard]]
ResultSoundField AUTDEmulatorWaitSoundField(HandlePtr handle,
                                            LocalFfiFutureResultSoundField future);

[[nodiscard]]
uint64_t AUTDEmulatorSoundFieldTimeLen(SoundFieldPtr sound_field,
                                       uint64_t duration_ns);

[[nodiscard]] uint64_t AUTDEmulatorSoundFieldPointsLen(SoundFieldPtr sound_field);

void AUTDEmulatorSoundFieldGetX(SoundFieldPtr sound_field, float *x);

void AUTDEmulatorSoundFieldGetY(SoundFieldPtr sound_field, float *y);

void AUTDEmulatorSoundFieldGetZ(SoundFieldPtr sound_field, float *z);

[[nodiscard]]
LocalFfiFutureResultEmualtorErr AUTDEmulatorSoundFieldSkip(SoundFieldPtr sound_field,
                                                             uint64_t duration_ns);

[[nodiscard]]
LocalFfiFutureResultEmualtorErr AUTDEmulatorSoundFieldNext(SoundFieldPtr sound_field,
                                                             uint64_t duration_ns,
                                                             float *time,
                                                             float *const *v);

[[nodiscard]]
ResultEmualtorErr AUTDEmulatorWaitResultEmualtorErr(HandlePtr handle,
                                                    LocalFfiFutureResultEmualtorErr future);

void AUTDEmulatorSoundFieldFree(SoundFieldPtr sound_field);

} // extern "C"

} // namespace autd3::native_methods

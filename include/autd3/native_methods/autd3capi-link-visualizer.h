#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::native_methods {

enum class Backend : uint8_t {
  Plotters = 0,
  Python = 1,
  Null = 2,
};

enum class CMap : uint8_t {
  Jet = 0,
  Viridis = 1,
  Magma = 2,
  Inferno = 3,
  Plasma = 4,
  Cividis = 5,
  Turbo = 6,
  Circle = 7,
  Bluered = 8,
  Breeze = 9,
  Mist = 10,
  Earth = 11,
  Hell = 12,
};

enum class Directivity : uint8_t {
  Sphere = 0,
  T4010A1 = 1,
};

struct PlotRangePtr {
  const void *_0;
};

struct ConfigPtr {
  const void *_0;
};

struct NullPlotConfigPtr {
  const void *_0;
};

struct PlotConfigPtr {
  const void *_0;
};

struct ResultPlotConfig {
  PlotConfigPtr result;
  uint32_t err_len;
  const void* err;
};

struct PyPlotConfigPtr {
  const void *_0;
};

struct ResultPyPlotConfig {
  PyPlotConfigPtr result;
  uint32_t err_len;
  const void* err;
};

extern "C" {

[[nodiscard]]
PlotRangePtr AUTDLinkVisualizerPlotRange(float x_min,
                                         float x_max,
                                         float y_min,
                                         float y_max,
                                         float z_min,
                                         float z_max,
                                         float resolution);

[[nodiscard]] uint64_t AUTDLinkVisualizerPlotRangeObservePointsLen(PlotRangePtr range);

void AUTDLinkVisualizerPlotRangeObservePoints(PlotRangePtr range, float *points);

uint32_t AUTDLinkVisualizerPhasesOf(LinkPtr visualizer,
                                    Backend backend,
                                    Directivity directivity,
                                    Segment segment,
                                    uint16_t idx,
                                    uint8_t *buf);

uint32_t AUTDLinkVisualizerIntensities(LinkPtr visualizer,
                                       Backend backend,
                                       Directivity directivity,
                                       Segment segment,
                                       uint16_t idx,
                                       uint8_t *buf);

uint32_t AUTDLinkVisualizerModulation(LinkPtr visualizer,
                                      Backend backend,
                                      Directivity directivity,
                                      Segment segment,
                                      uint8_t *buf);

ResultI32 AUTDLinkVisualizerCalcField(LinkPtr visualizer,
                                      Backend backend,
                                      Directivity directivity,
                                      const Vector3 *points,
                                      uint32_t points_len,
                                      Segment segment,
                                      uint16_t idx,
                                      float *buf);

[[nodiscard]]
ResultI32 AUTDLinkVisualizerPlotField(LinkPtr visualizer,
                                      Backend backend,
                                      Directivity directivity,
                                      ConfigPtr config,
                                      PlotRangePtr range,
                                      Segment segment,
                                      uint16_t idx);

[[nodiscard]]
ResultI32 AUTDLinkVisualizerPlotPhase(LinkPtr visualizer,
                                      Backend backend,
                                      Directivity directivity,
                                      ConfigPtr config,
                                      Segment segment,
                                      uint16_t idx);

[[nodiscard]]
ResultI32 AUTDLinkVisualizerPlotModulation(LinkPtr visualizer,
                                           Backend backend,
                                           Directivity directivity,
                                           ConfigPtr config,
                                           Segment segment);

[[nodiscard]] LinkBuilderPtr AUTDLinkVisualizerSphereNull(bool use_gpu, int32_t gpu_idx);

[[nodiscard]] LinkBuilderPtr AUTDLinkVisualizerT4010A1Null(bool use_gpu, int32_t gpu_idx);

[[nodiscard]] NullPlotConfigPtr AUTDLinkVisualizerNullPlotConfig();

[[nodiscard]] LinkBuilderPtr AUTDLinkVisualizerSpherePlotters(bool use_gpu, int32_t gpu_idx);

[[nodiscard]] LinkBuilderPtr AUTDLinkVisualizerT4010A1Plotters(bool use_gpu, int32_t gpu_idx);

[[nodiscard]]
ResultPlotConfig AUTDLinkVisualizerPlotConfig(uint32_t width,
                                              uint32_t height,
                                              float cbar_size,
                                              uint32_t font_size,
                                              uint32_t label_area_size,
                                              uint32_t margin,
                                              float ticks_step,
                                              CMap cmap,
                                              const char *fname);

[[nodiscard]] bool AUTDLinkVisualizerPlotConfigIsDefault(PlotConfigPtr config);

[[nodiscard]] LinkBuilderPtr AUTDLinkVisualizerSpherePython(bool use_gpu, int32_t gpu_idx);

[[nodiscard]] LinkBuilderPtr AUTDLinkVisualizerT4010A1Python(bool use_gpu, int32_t gpu_idx);

[[nodiscard]]
ResultPyPlotConfig AUTDLinkVisualizerPyPlotConfig(int32_t width,
                                                  int32_t height,
                                                  int32_t dpi,
                                                  const char *cbar_position,
                                                  const char *cbar_size,
                                                  const char *cbar_pad,
                                                  int32_t fontsize,
                                                  float ticks_step,
                                                  const char *cmap,
                                                  bool show,
                                                  const char *fname);

[[nodiscard]] bool AUTDLinkVisualizerPyPlotConfigIsDefault(PyPlotConfigPtr config);

} // extern "C"

} // namespace autd3::native_methods
